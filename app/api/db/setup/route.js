import { NextResponse } from 'next/server';
import { sql } from '@vercel/postgres';

export async function POST() {
  try {
    console.log('Starting database setup...');

    // Create Users table
    console.log('Creating Users table...');
    await sql`
      CREATE TABLE IF NOT EXISTS "Users" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "name" varchar(255) NOT NULL,
        "email" varchar(255) UNIQUE NOT NULL,
        "phone" varchar(20) NOT NULL,
        "password" varchar(255) NOT NULL,
        "role" varchar(20) NOT NULL
      );
    `;

    // Create Doctors table
    console.log('Creating Doctors table...');
    await sql`
      CREATE TABLE IF NOT EXISTS "Doctors" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "name" varchar(255) NOT NULL,
        "specialty" varchar(255) NOT NULL,
        "email" varchar(255) NOT NULL,
        "phone" varchar(20) NOT NULL
      );
    `;

    // Create Appointments table
    console.log('Creating Appointments table...');
    await sql`
      CREATE TABLE IF NOT EXISTS "Appointments" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "patient_id" int NOT NULL,
        "doctor_id" int NOT NULL,
        "appointment_date" date NOT NULL,
        "appointment_time" time NOT NULL,
        "status" varchar(20) NOT NULL
      );
    `;

    // Create Notifications table
    console.log('Creating Notifications table...');
    await sql`
      CREATE TABLE IF NOT EXISTS "Notifications" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "user_id" int NOT NULL,
        "appointment_id" int NOT NULL,
        "notification_type" varchar(50) NOT NULL,
        "notification_date" date NOT NULL
      );
    `;

    // Add foreign key constraints
    console.log('Adding foreign key constraints...');
    await sql`
      ALTER TABLE "Appointments" 
      ADD CONSTRAINT IF NOT EXISTS fk_patient 
      FOREIGN KEY ("patient_id") REFERENCES "Users" ("id");
    `;

    await sql`
      ALTER TABLE "Appointments" 
      ADD CONSTRAINT IF NOT EXISTS fk_doctor 
      FOREIGN KEY ("doctor_id") REFERENCES "Doctors" ("id");
    `;

    await sql`
      ALTER TABLE "Notifications" 
      ADD CONSTRAINT IF NOT EXISTS fk_notification_user 
      FOREIGN KEY ("user_id") REFERENCES "Users" ("id");
    `;

    await sql`
      ALTER TABLE "Notifications" 
      ADD CONSTRAINT IF NOT EXISTS fk_notification_appointment 
      FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id");
    `;

    // Add a default doctor if none exists
    console.log('Checking for existing doctors...');
    const doctorCheck = await sql`
      SELECT COUNT(*) FROM "Doctors";
    `;

    if (parseInt(doctorCheck.rows[0].count) === 0) {
      console.log('Adding default doctor...');
      await sql`
        INSERT INTO "Doctors" (name, specialty, email, phone)
        VALUES (
          'Agit Roy',
          'Weight Loss & Nutrition Specialist',
          'dr.agitroy@example.com',
          '+1234567890'
        );
      `;
    }

    return NextResponse.json({
      success: true,
      message: 'Database setup completed successfully'
    });
  } catch (error) {
    console.error('Database setup error:', {
      message: error.message,
      stack: error.stack,
      code: error.code
    });
    
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to set up database',
        error: error.message,
        details: error.stack
      },
      { status: 500 }
    );
  }
} 